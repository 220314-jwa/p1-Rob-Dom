package com.revature.data;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.revature.service.ConnectionFactory;
import com.revature.trms.Event;

public class EventDAOImpl implements EventDAO {
	Connection connection;
	
	public EventDAOImpl() throws ClassNotFoundException {
		connection = ConnectionFactory.getConnected();
	}

@Override
// this method needs to insert the object into the database:
// so, we need to connect to the database:
public int create(Event newEvent) {	
    // this stores our sql command, that we would normally to DBeaver/command line
    //                             0   1     2        3            4    5
    String sql = "insert into pet (dept_id, head_id, eventName)" +
            "values (default, ?, ?);";
    try {
        // create a prepared statement, we pass in the sql command
        // also the flag "RETURN_GENERATED_KEYS" so we can get that id that is generated
        PreparedStatement preparedStatement = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
        // set the fields:
        preparedStatement.setString(1, newEvent.getEventName());

        // shortcut for now, but we need the corresponding id for the status
        int count = preparedStatement.executeUpdate();
		
		ResultSet resultSet = preparedStatement.getGeneratedKeys();
		if(count>0) {
			
			System.out.println("Event added!");
			// return the id generated by this entry
			resultSet.next();
			int id = resultSet.getInt(1);
			
			return id;
			
		}else {
			System.out.println("Something went wrong when adding event type!");
		}
        
    } catch (SQLException e){
        // print out what went wrong:
        e.printStackTrace();
    }
	return -1;
	}

@Override
public Event getById(long id) {
	// TODO Auto-generated method stub
	String sql = "select * from event where id =?;";
	Event event = null;
	try {
		PreparedStatement preparedStatement = connection.prepareStatement(sql,PreparedStatement.RETURN_GENERATED_KEYS);
		preparedStatement.setLong(1,id);
		// execute the command, and save the count of rows affected:
		ResultSet resultSet = preparedStatement.executeQuery();
		if (resultSet.next()) {
			event = EventDAOImpl.parseResultSet(resultSet);
			//System.out.println(empl);
			// now, we've created a pet Java object based on the info from our table:
		} else {
			System.out.println("Event with id - " + id +" - does not exist!");
			// return null in this case:
		}

	} catch (SQLException e) {
		e.printStackTrace();
	}
	return event;
}

private static Event parseResultSet(ResultSet resultSet) {
	// TODO Auto-generated method stub
	Event event = new Event();

	try {
		event.setEventId(resultSet.getInt(1));
		event.setEventName(resultSet.getString(2));

	} catch (SQLException e) {
		e.printStackTrace();
	}

	return event;
}

@Override
public List<Event> getAll() {
	// TODO Auto-generated method stub
	return null;
}

@Override
public void update(Event updatedObj) {
	// TODO Auto-generated method stub
	
}

@Override
public void delete(Event objToDelete) {
	// TODO Auto-generated method stub
	
}

@Override
public void deleteById(int id) {
	// TODO Auto-generated method stub
	
}
}